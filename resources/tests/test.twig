{{'<?php'}}

namespace {{testNamespace}};

use {{classFqcn}};
use {{phpunit}} as TestCase;

{% set special = isTrait or isAbstract or isInterface %}
{% if special %}
/**
 * Wraps {{className}}.
 */
{% endif %}
{% if isTrait %}
class Test{{className}}
{
    use {{className}};
}

{% elseif isInterface %}
class Test{{className}} implements {{className}}
{
    //
}

{% elseif isAbstract %}
class Test{{className}} extends {{className}}
{
    //
}

{% endif %}
/**
 * Auto generated by `phint test`.
 */
class {{className}}Test extends TestCase
{
{% if (newable or special) and setup %}
    /**
     * @var {{ special ? 'Test' : ''}}{{className}}
     */
    protected ${{className|lcfirst}};

{% endif %}
{% if setup %}
    public function setUp()
    {
        parent::setUp();

{% if newable or special %}
        $this->{{className|lcfirst}} = new {{ special ? 'Test' : ''}}{{className}};
{% endif %}
    }
{% endif %}
{% if teardown %}

    public function tearDown()
    {
        parent::tearDown();
    }
{% endif %}
{% for name, method in methods if method.isPublic and not method.isAbstract and not method.maybeMagic %}

{% if naming == 't' %}
    public function test{{name|ucfirst}}()
{% elseif naming == 'm' %}
    public function test_{{name|snake}}()
{% elseif naming == 'i' %}
    /**
     * @test
     */
    public function it_{{name}}()
{% endif %}
    {
{% if method.isStatic %}
        $actual = {{className}}::{{name}}();
{% elseif setup %}
        $actual = $this->{{className|lcfirst}}->{{name}}();
{% else %}
        ${{className|lcfirst}} = new {{ special ? 'Test' : ''}}{{className}};

        $actual = ${{className|lcfirst}}->{{name}}();
{% endif %}

        // $this->assertSame('', $actual);
    }
{% endfor %}
}
